<?php

namespace SC\ActiviteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * InscriptionStageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InscriptionStageRepository extends EntityRepository
{
    public function validationPayment($prixTotal, $activite, $user, $nomEnfant, $prenomEnfant, $debutStage, $finStage) {
      $query = $this->_em->createQuery('UPDATE SCActiviteBundle:InscriptionStage i'
              . ' SET i.prixPayeStage = :prixTotal where i.activite = :activite'
              . ' AND i.user = :user AND i.debutStage = :debutStage AND i.finStage = :finStage'
              . ' and i.nomEnfant = :nom AND i.prenomEnfant = :prenom')
                       ->setParameter('prixTotal', $prixTotal)
                       ->setParameter('activite', $activite)
                       ->setParameter('nom', $nomEnfant)
                       ->setParameter('prenom', $prenomEnfant)
                       ->setParameter('user', $user)
                       ->setParameter('debutStage', $debutStage)
                       ->setParameter('finStage', $finStage);

       $query->execute();
    }
    
    public function getStage($activte,$debutStage,$finStage) {
        
    }
    
    // pour un utilisateur, tous les stages  ou les enfants sont inscrits
    //return la somme
    public function totalStagePayÃ©($email) {
        $saison = new Saison;
        $year = $saison->connaitreSaison();
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.user = :user')
            ->andWhere('a.saison = :annee')
                ->setParameter('user', $email)
            ->andWhere('a.saison = :annee')
                ->setParameter('annee', $year);

        $total = 0;
        $inscription = $qb->getQuery()->getResult();
        foreach ($inscription as $inscrit) {
            $total = $total + $inscrit->getPrixPayeStage();
        }
        return $total;
    }
    
    // jointure entre activite et inscriptionStage
    public function inscriptionStageActivite($email) {
        
        $saison = new Saison;
        $year = $saison->connaitreSaison();
        
        $qb = $this->_em->createQuery('SELECT i.nomEnfant, i.prenomEnfant, i.debutStage,'
                . 'i.finStage, i.prixPayeStage, a.id, a.nomActivite FROM SCActiviteBundle:InscriptionStage i'
                . ', SCActiviteBundle:Activite a WHERE a.id = i.activite AND i.saison =:saison AND i.user =:email')
                ->setParameter('email', $email)
                ->setParameter('saison', $year);
        
        return $qb->getResult();
    }
        public function totalStage($email) {
        $total = 0;
        $saison = new Saison ();
        $year = $saison->connaitreSaison();
        
        $qb = $this->_em->createQuery('SELECT a.prixStage , a.charges from SCActiviteBundle:Stage a , SCActiviteBundle:InscriptionStage b where a.debutStage = b.debutStage and a.finStage = b.finStage and b.user = :email and a.saison = :annee ')
                        ->setParameter('email', $email)
                        ->setParameter('annee', $year);

        $liste =$qb ->getResult();
        foreach ($liste as $prix) {
            $total = $total + $prix['prixStage'] +$prix['charges'] ;
        }
        return $total;
       }
}